#!/usr/bin/env python3

# Data Structures & Algorithms in Python - Goodrich
# Chapter 1 | Exercise R-1.3 version 2
#
# Write a short Python function that takes a positive integer n and returns the sum of the squares 
# of all the positive integers smaller than n. 
#
# Author: Daniel Raphael
#

import argparse
import sys

DEBUG = True

# Configure argument parser
parser = argparse.ArgumentParser('Takes one positive number as the argument "n". Returns the sum of the squares of all positive integers smaller than n')
parser.add_argument("n", type=int, help="a positive integer.")
args = parser.parse_args()

if args.n < 1:
    print('n must be a positive integer greater than zero')
    sys.exit()

def sumofsquaresof(number):
    number_series = []              # to hold each number from 1 to n 
    total_of_all_squares = 0        # holds the sum of all squares of all numbers
    for num in range(1, number+1):
        number_series.append(num)
    if DEBUG:
        print('number_series == {}'.format(number_series))

    for num in number_series:
        total_of_all_squares += num**2
        if DEBUG:
            print('{}^2 == {}'.format(num, num**2))
            print('total of all squares so far == {}\n'.format(total_of_all_squares))

    print('Output:')
    return total_of_all_squares

print(sumofsquaresof(args.n))

